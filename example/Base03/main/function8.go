package main

/*
表面上看，指针参数的性能要更好一些，但实际上得具体分析。
被复制的指针会延长目标对象的生命周期，还可能会导致它被分配到堆上，
那么其性能消耗就得加上堆内存分配和垃圾回收的成本。
其实在栈上复制小对象只需很少的指令即可完成，远比运行时进行堆内存分配要快得多。
另外，并发编程也提倡尽可能使用不可变对象（只读或复制），这可消除数据同步等麻烦。
当然，如果复制成本很高，或需要修改原对象状态，自然使用指针更好。
 */
func main() {

	x := 100

	p := &x

	function8(p)

}

func function8(p *int) {
	go func() {//延长 p 生命周期
		println(p)
	}()
}
